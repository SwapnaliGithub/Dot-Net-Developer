5. Inline function
Inline function is a technique used by the compilers and instructs to insert complete body of the function wherever the function is used in the program of source code

6. WHAT IS OPERATOR OVERLOADING? 
Operator overloading is a function where different operators are applied and depends on the arguments.

13. Describe Polyline in WPF?
Answer: A polyline is an object in AutoCAD that consists of one or more line (or arc) segments. A rectangle is an example of a polyline that you are already familiar with. As you've seen, it is one object that can be modified and worked with easier than four separate lines.
In other words, A polyline is a collection of connected straight lines. The Polyline object represents a polyline shape and draws a polyline with the given points. The Points property represents the points in a polyline. The Stroke property sets the color and StrokeThickness represents the width of the line of a polyline.

Creating a Polyline: The Polyline element in XAML creates a polyline shape. The following code snippet creates a polyline by setting its Points property. The code also sets the black stroke of width 4. 
<Polyline
   Points="10,100 100,200 200,30 250,200 200,150"
   Stroke="
Black"
StrokeThickness="4" />

Question 14: What are the Templates in WPF ?
Answer: Templates are an integral part of user interface design in WPF. 
Each control has its own default template associated with it. Using styles, you can only modify the default template associated. WPF enables you to change the look and feel of the controls and this can be achieved by using templates.
WPF has the following three types of templates:
Control Template
Items Panel Template
Data Template
Control Template
Control Template enables you to customize the default appearance and behavior of the control.
Data Template
Data Template enables you to customize the appearance of the data objects. It is beneficial when a collection of objects binds with ItemControls like ListView, ListBox,ComboBox.
ItemsPanelTemplate
ItemsPanelTemplate enables you to customize the panel, which defines the layout of items in ItemControls like ListBox and ListView. Every ItemControl has its default panel.

15.What is the difference between public, static and void? 
You can access public declared variables anywhere in the application. 
Static declared variables are globally accessible without creating an instance of the class. 
Void is a type modifier that specifies that the method doesn't return any value.

WPF stands for Windows Presentation Foundation. It's a re-invention of a UI for Desktop applications using WPF. Apart from dropping controls on "Windows Forms" just as developers have been doing for years, WPF provides an extra rapid boost to the application development including Rich User Interface, Animation and much more.

WPF also allows programmers to develop web pages which can be run within a web browser. In a nutshell the following things can be done using WPF:

Draw normal controls and graphics.
Can easily load/play audio and video files.
Can provide smooth graphical effects such as drop shadows and color gradients.
Can use shared styles which can be used across the same controls to provide the same theme, skin and design.
Transforming objects including shapes, controls and video.
Can create and animate 3D graphics.
Can easily draw vector graphics that scale without jagged aliasing.

Threading
Threads are the backbone of any software application. In simple terms, a thread is a single sequence of instructions that a process can execute. In C#, the System.Threading namespace offers classes that allow you to manipulate threads. When a C# program starts, it’s a single threaded process by default. This “main” thread is responsible for executing your code line by line, creating what is known as a single threaded application.
Single threading is simpler to implement and debug

Implementing single threading in C# is quite simple. You instantiate an object of the Thread class, passing it a ThreadStart delegate which points to the method to be executed in the new thread, and then call the Start() method. Here’s an example:
void MyFunction()
{
    // Some work here
}
Thread myThread = new Thread(new ThreadStart(MyFunction));
myThread.Start();
In the example above, MyFunction is the method the new thread will execute. The Start() method initiates the execution of the new thread.

Multithreading
Multithreading in C# is a process in which multiple threads work SIMULTANEOUSLY. 
It is a way to achieve MULTITASKING. It saves time because multiple tasks are being executed at a time. 
To create multithreaded application in C#, we need to use SYSTEM.THREDING namespace
Threads make it possible to execute several program pieces concurrently, enhancing the program’s efficiency. This brings us to the concept of multithreading.
 multithreading can improve application performance by performing tasks concurrently.
Implementing multithreading in C# requires a step further. You create more instances of the Thread class, one for each task you want to run concurrently:

void Function1()
{
    // Some work here
}
void Function2()
{
    // Some other work here
}
Thread thread1 = new Thread(new ThreadStart(Function1));
Thread thread2 = new Thread(new ThreadStart(Function2));
thread1.Start();
thread2.Start();
In the example above, Function1 and Function2 will run concurrently, each in its thread. The order of execution is not determined by the order in which the threads are started. It’s managed by the thread scheduler, which is part of the .NET runtime.


/*
 * C# Program to Check whether the Entered Number is Even or Odd
 */
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
 
namespace check1
{
    class Program
    {
        static void Main(string[] args)
        {
            int i;
            Console.Write("Enter a Number : ");
            i = int.Parse(Console.ReadLine());
            if (i % 2 == 0)
            {
                Console.Write("Entered Number is an Even Number");
                Console.Read();
            }
            else
            {
                Console.Write("Entered Number is an Odd Number");
                Console.Read();
            }
        }
    }
}

Enter a Number : 25
Entered Number is an Odd Number


using System;  
                      
public class CountCharacter  
{  
    public static void Main()  
    {  
        String string1 = "The best of both worlds";  
        int count = 0;  
          
        //Counts each character except space  
        for(int i = 0; i < string1.Length; i++) {  
            if(string1[i] != ' ')  
                count++;  
        }  
          
        //Displays the total number of characters present in the given string  
        Console.WriteLine("Total number of characters in a string: " + count);  
    }  
}   
Output:

Total number of characters in a string: 19


C# program to print below star triangle by entering no of lines
*
**
***
****
*****
Here's a C# program that prints a star triangle based on the number of lines entered by the user:

using System;

class Program
{
    static void Main()
    {
        Console.Write("Enter the number of lines: ");
        int numLines = Convert.ToInt32(Console.ReadLine());

        for (int i = 1; i <= numLines; i++)
        {
            for (int j = 1; j <= i; j++)
            {
                Console.Write("*");
            }
            Console.WriteLine();
        }
    }
}
This program prompts the user to enter the number of lines, then it uses nested loops to print the appropriate number of stars on each line. The outer loop controls the number of lines, and the inner loop prints the stars for each line. Each line has a number of stars equal to the line number.


C# program to print below star triangle by entering no of lines
*****
****
***
**
*
Here's C# program that prints the inverted star triangle based on the number of lines entered by the user:

using System;

class Program
{
    static void Main()
    {
        Console.Write("Enter the number of lines: ");
        int numLines = Convert.ToInt32(Console.ReadLine());

        for (int i = numLines; i >= 1; i--)
        {
            for (int j = 1; j <= i; j++)
            {
                Console.Write("*");
            }
            Console.WriteLine();
        }
    }
}
This program prompts the user to enter the number of lines, then it uses nested loops to print the inverted star triangle. The outer loop controls the number of lines, starting from the input number of lines and decrementing by 1 on each iteration. The inner loop prints the stars for each line, with the number of stars equal to the current line number.

C# program to print below star diamond by entering no of lines
*
  ***
 *****
*******
 *****
  ***
   *
Here's the C# program that prints the diamond pattern based on the number of lines entered by the user:

using System;

class Program
{
    static void Main()
    {
        Console.Write("Enter the number of lines: ");
        int numLines = Convert.ToInt32(Console.ReadLine());

        // Upper part of the diamond
        for (int i = 1; i <= numLines; i++)
        {
            // Print spaces
            for (int j = 1; j <= numLines - i; j++)
            {
                Console.Write(" ");
            }

            // Print stars
            for (int k = 1; k <= 2 * i - 1; k++)
            {
                Console.Write("*");
            }

            Console.WriteLine();
        }

        // Lower part of the diamond
        for (int i = numLines - 1; i >= 1; i--)
        {
            // Print spaces
            for (int j = 1; j <= numLines - i; j++)
            {
                Console.Write(" ");
            }

            // Print stars
            for (int k = 1; k <= 2 * i - 1; k++)
            {
                Console.Write("*");
            }

            Console.WriteLine();
        }
    }
}
This program prompts the user to enter the number of lines, then it uses nested loops to print the diamond pattern. The upper part of the diamond is printed first, followed by the lower part. The logic for printing spaces and stars remains the same as in the previous program.


C# program to print below star triangle by entering no of lines
*
  ***
 *****
*******
Here's the C# program that prints the star triangle with spaces based on the number of lines entered by the user:

using System;

class Program
{
    static void Main()
    {
        Console.Write("Enter the number of lines: ");
        int numLines = Convert.ToInt32(Console.ReadLine());

        for (int i = 1; i <= numLines; i++)
        {
            // Print spaces
            for (int j = 1; j <= numLines - i; j++)
            {
                Console.Write(" ");
            }

            // Print stars
            for (int k = 1; k <= 2 * i - 1; k++)
            {
                Console.Write("*");
            }

            Console.WriteLine();
        }
    }
}
This program prompts the user to enter the number of lines, then it uses nested loops to print the star triangle with spaces. The outer loop controls the number of lines. The first inner loop prints the appropriate number of spaces before the stars on each line, based on the line number and the total number of lines. The second inner loop prints the stars for each line, with the number of stars being '2 * i - 1' (where i is the current line number).


C# program to print below star triangle by entering no of lines
*****
****
***
**
*
Here's C# program that prints the inverted star triangle based on the number of lines entered by the user:

using System;

class Program
{
    static void Main()
    {
        Console.Write("Enter the number of lines: ");
        int numLines = Convert.ToInt32(Console.ReadLine());

        for (int i = numLines; i >= 1; i--)
        {
            for (int j = 1; j <= i; j++)
            {
                Console.Write("*");
            }
            Console.WriteLine();
        }
    }
}
This program prompts the user to enter the number of lines, then it uses nested loops to print the inverted star triangle. The outer loop controls the number of lines, starting from the input number of lines and decrementing by 1 on each iteration. The inner loop prints the stars for each line, with the number of stars equal to the current line number.
