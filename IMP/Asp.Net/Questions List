Interview Questions
Tell me about yourself
truncate and delete
Stored procedures
Primary key, unique key, composite key
Multiple inheritance in interface
Project in detail
How can we store excel sheets in database directly
Reference types
bulk insert
CI/CD Pipeline, Jenkins
lazy loading
Inheritance - method overloading with int16,int32,int64
Anti-forgery token - uses
String memory, int, signed int, unsigned int
Entity framework
why multiple inheritance not in class and why in interface
Why WCF Rest services instead of web API, web services
Difference between public variable and public properties
Filters in MVC
Various contracts in rest service
Package for your services
ref and out keyword
sealed class and it's uses
IEnumerable, IQueryable

managing existing systems using .net frameworks and creating applications on-demand.
Updating and creating new objects in database.
Work with web technologies like HTML and CSS
Analysis of requirements
Helping to release new changes to production environment.

Interview Questions
what is the difference between .net and .netcore?




Singleton design pattern in C#
View(s): 42322
How to implement singleton design pattern in C#?
 
Answer 1)

The intent of the Singleton pattern as defined in Design Patterns is to "ensure a class has only one instance, and provide a global point of access to it".

The singleton pattern is a design pattern used to implement the mathematical concept of a singleton, by restricting the instantiation of a class to one object. This is useful when exactly one object is needed to coordinate actions across the system. The concept is sometimes generalized to systems that operate more efficiently when only one object exists, or that restrict the instantiation to a certain number of objects (say, five). Some consider it an anti-pattern, judging that it is overused, introduces unnecessary limitations in situations where a sole instance of a class is not actually required, and introduces global state into an application.

Below is sample implementation:

/// <summary>
/// Thread-safe singleton example created at first call
/// </summary>
public sealed class Singleton
{
    private static readonly Singleton _instance = new Singleton(); 

    private Singleton() { } 

    public static Singleton Instance
    {
        get
        {
            return _instance;
        }
    }
}
