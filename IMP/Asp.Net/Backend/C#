1. How to implement asynchronous programming?
Asynchronous programming in .NET is usually implemented using the async and await keywords. Asynchronous programming is commonly used for I/O bound operations, such as file access, database queries, and network communication.

Asynchronous programming is particularly useful in web application development to prevent main-thread blocking while performing synchronous I/O operations.

2. What do you know about dependency injection?
Dependency Injection is the implementation of Inversion of Control, where a class no longer initializes its dependencies but instead accepts them through constructors or properties.

Three commonly used service lifetimes are Singleton, Scoped, and Transient.

Singleton: The instance is created once and used throughout the application's runtime.
Scoped: Created a new one for each scope, usually each request in the web application.
Transient: Created every time the dependency is called.
Dependency injection enhances modularity and flexibility and simplifies unit testing by replacing actual dependencies with mockups.

All About Dependency Injection in ASP .NET Core
Dependency injection, IoC container, service scoped, singleton, scoped, transient
juldhais.net

3. Can you explain the SOLID principles?
The SOLID principles provide five guidelines for developing code that is easy to maintain and extend.

Single Responsibility: Each class can only have one responsibility.
Open/Closed: Each class must be open for extension and closed for modification.
Liskov Substitution: The parent class must be able to be replaced by any derived class without causing errors in the program.
Interface Segregation: Each class should only implement the interfaces that will actually be used.
Dependency Inversion: High-level modules should not depend on low-level modules. Both must rely on abstractions.
4. What do you know about unit testing?
Unit testing is used to ensure application logic runs according to specifications. We can use unit testing frameworks such as NUnit or xUnit. Mocking libraries such as Moq can be used to create mock objects.

The code coverage of the unit tests must reach the specified percentage. The ideal value for code coverage is around 80%. We can use tools such as SonarCube or JetBrains dotCover to measure the code coverage.

5. How do you implement a locking mechanism?
Locking mechanisms are important for managing resources accessed together in multithreading to avoid race conditions and deadlocks. Locking mechanisms can be implemented using. lock, Monitor, Mutex, and Semaphore.

6. What do you know about LINQ?
LINQ (Language-Integrated Query) is a feature that allows writing queries to data sources in a declarative and consistent way. LINQ can be used to perform queries to memory (lists or arrays), databases, and XML.

We can apply LINQ to query the database using an ORM such as Entity Framework. Each LINQ query will be converted into an SQL query and executed on the database.

7. How do you troubleshoot?
The troubleshooting process can be done using the Visual Studio debugger to check variable values and program execution flow. Utilizing logging functionality is beneficial in identifying and resolving errors that may arise while troubleshooting.

For performance-related problems, we can use profiling tools such as Visual Studio Diagnostic Tools or JetBrains dotTrace.


Assembly https://www.csharpstar.com/asp-net-interview-questions-part-3-net-assemblies/
In C#, public and private are access modifiers that determine the visibility and accessibility of class members.

A member declared as public can be accessed from anywhere, inside or outside the class.

A member declared as private can only be accessed within the class where it is declared.
Dispose v/s Finalize
Dispose	Finalize
It is used to free unmanaged resources at any time.	It can be used to free unmanaged resources held by an object before that object is destroyed.
It is called by user code and the class which is implementing dispose method, must has to implement IDisposable interface.	It is called by Garbage Collector and cannot be called by user code.
It is implemented by implementing IDisposable interface Dispose() method.	It is implemented with the help of Destructors
There is no performance costs associated with Dispose method.	There is performance costs associated with Finalize method since it doesn’t clean the memory immediately and called by GC automatically.
When a program starts, the system allocates some memory for the program to get executed.

When a C# program instantiates a class, it creates an object.

The program manipulates the object, and at some point the object may no longer be needed.
When the object is no longer accessible to the program and becomes a candidate for garbage collection.
1.What is C#?
C# is a simple & powerful object-oriented programming language developed by Microsoft. 
C# can be used to create various types of applications, such as web, windows, console applications, or other types of applications using Visual studio.
C# is a high-level object-oriented programming language. It is used for building secure and robust applications.

2. Can we execute multiple catch blocks in C# program for one exception?
No. You can’t use multiple catch blocks for same exception in C# because a catch block is preceded by a try block.

3.Which parameter can be used to return multiple values from a function?
Reference or output parameters can be used to return multiple values from a function.

4.What’s Polymorphism in C#?
It’s the ability of an object to take different forms and behave differently in different cases. 
It is of two types:
Compile time polymorphism
Runtime polymorphism.

Define Keywords in C#?
Keywords are reserved words that have some predefined actions. They are special words that hold special meaning to the compiler

What are jagged arrays?
A jagged array, also called an array of arrays, is a multidimensional array that consists of other arrays of different sizes.

Define a local variable in C#.
Local variables are referred to as variables that are defined in a code block. They are only visible in the code block they’re declared in.

Why does C# not support multiple inheritances?
C# does not support multiple inheritance because of Name collision.

Which keyword is used to implement duck typing?
Dynamic

What is a read only variable
Read only variables are created using the readonly keyword. Its value can be modified only within a constructor.

Can you change the value of a variable while debugging an application
Yes, the values of variables can be altered during debugging.

What is LINQ in C#?
Language-Integrated Query (LINQ) is a .NET Framework. It is used to retrieve information from different kinds of sources.

1.What are the constructors?
Constructor is a method that gets executed when a new class object is created. It can be public or private.

2.Can you tell us the difference between a constant from a read-only?
Read-only is a runtime constant. Const is a compile-time constant.

What is method overloading?
Method overloading is a method of having two or more methods with the same name but different parameter lists.

What are the features of read-only variables?
The features of read-only variable are as follows:
Initialized at runtime
Can be used with static modifiers
Only declared at the class level

5.Define dynamic type variables in C#.
Dynamic type variable was introduced in C# 4.0. It is used to skip type checking at compile-time. It is created using dynamic keywords. You can store any type of value in a dynamic variable.

6.What is a "using" statement in C#?
Using a statement ensures the object is disposed of as soon as it goes out of scope without needing to write any code.

7.
Define nullable types in C#.
Nullable types allow you to assign a normal range to null values. You can also assign true or false to null types/
The syntax is:
< data_type> ? <variable_name> = null;

Can you tell us something about the stream reader and stream writer class in C#?
Stream reader and stream writer classes are used for reading and writing actions to a file. Both are inherited from the abstract base class stream.

9.
Can you tell the difference between overloading and overriding?
Overloading- When you have two or more methods in the same scope with the same name but different parameters.
Overriding- It allows you to change the behavior of a method in a subclass or child class.

10.
Define file handling in C#.
File handling refers to the management of files. It consists of different actions like creating the file, writing to the file, reading from the file, etc. 
Read and write are the two operations used in file handling.

11.
Explain Boxing and Unboxing.
Both Boxing and Unboxing are used for converting the type. However, there are some differences.

Boxing - Boxing converts the value type to the object or to the data type of an interface implemented by this particular value type.
The CLR boxes a value, in other words, converts the value type to an object. For this, CLR wraps the value in System. Object and store it in the heap area within the domain of the application.

Unboxing - Unboxing extracts the value type from the object or any interface type that has been implemented. For Boxing, implicit code may be used, but for Unboxing explicit code must be used.

Boxing and Unboxing highlight that C# has a unified view of the type system, meaning that all value types can be treated as objects.

12.
Differentiate between managed and unmanaged code
The difference between managed and unmanaged code is as follows:
Managed Code - Managed Code is developed within the .NET framework. CLR directly executes such code by using managed code execution. 
Any language written in the .NET framework is considered to be managed code.
Unmanaged Code - Unmanaged code is any code developed outside the .NET framework. Unmanaged applications are not executed by CLR. 
Some languages like C++ can write unmanaged applications such as an application for accessing the low-level functions of the operating system. 
Some examples of unmanaged code include background compatibility with the code of VB, ASP, and COM.

13.
Differentiate between Struct and Class in C#.
Class and struct both are user-defined data types. However, they have some important differences:
Struct
Struct is a value type in C# that inherits values from System.Value
It is mostly used for small quantities of data
It cannot be inherited to any other type
A Struct cannot have abstract values.
Class
Class is a reference type in C#. Since it refers to objects, it inherits from System.Object
Classes are mostly used for large quantities of data
Classes can be inherited to other classes
Classes can have abstract values.
A default constructor can be created for classes.

14.
What is the difference between Task and Thread in C#?
Following are the differences between Task and Thread in C#:
Task is an object used in the Task Parallel Library (TPL) to represent an asynchronous operation, while a Thread is a separate path of execution in a program. 
Tasks are a higher level of abstraction than threads and are used to manage the execution of code in parallel.
Tasks are easier to use and manage than threads, and they can also be used to provide more efficient resource utilization. 
Threads on the other hand, provide a lower level of abstraction and are used to execute code directly in the processor.

15.
How is encapsulation done in C#?

Hide Answer
Access specifiers help implement Encapsulation, in C#, is implemented by using access specifiers. A class member’s scope and visibility are defined by these access specifiers.
With public access specifiers, a class can expose its member variables and functions to other objects and functions. Once a member is public, it can be reached from outside the class.
With private access specifiers, a class can hide its member variables and functions from other objects and functions. The private members of a class can be accessed only by functions of the same class. Even instances of the same class do not have access to its private members.
Protected access specifiers are similar to private access specifiers because they cannot be accessed outside the class. However, protected class members can be accessed by any subclass of that class as well. This enables implementing inheritance.

16.
What is a Destructor in C# and when is it used?

Hide Answer
A destructor is a special method in C# that is automatically called when an object is destroyed. It is used to free up any resources that the object may have been using, such as memory or files. Destructors are usually implemented in a class and are denoted by the keyword ~ followed by the class name.

For example, if a class called MyClass was to have a destructor, it would be declared as follows: ~MyClass().

17.
For methods inside the interface, why can you not specify the accessibility modifier?

Hide Answer
Virtual methods in an interface have no method definition. The methods here are written to be overridden in the derived class and hence, they are publicly available.

18.
Differentiate between ref and out keywords.

Hide Answer
The main difference between ref and out keywords in C# is that ref requires that the variable be initialized before being passed to the method whereas out keyword doesn’t require the variable to be initialized before being passed to the method.

19.
Why is finally block used in C#?

Hide Answer
The finally block always gets executed if there is an exception or not. When the code is executed in the try block and an exception occurs, control returns to the catch block, and in the end, the finally block gets executed. The finally block therefore can contain closing connections to the database and the release of file handlers.

https://www.turing.com/interview-questions/c-sharp
Write a program in C# to reverse a string?
using System;

public class Program
{
    public static void Main(string[] args)
    {
        string str = "";
        Console.Write("Enter a string : ");
        str = Console.ReadLine();
        
        char[] arr = str.ToCharArray();
        Array.Reverse(arr);
        Console.Write("Reverse string is : ");
        
        foreach(char ch in arr)
        {
            Console.Write(ch);
        }
        //Console.WriteLine ("Hello Mono World");
    }
}

Enter a string : Swapnali Vishal Ladi
Reverse string is : idaL lahsiV ilanpawS

21.
Write a program in C# to reverse the order of the given words?
using System;

public class Program
{
    public static void Main(string[] args)
    {
        string str = "Hello World";
        string[] words = str.Split(' ');
        Console.Write("Reversed order of the given string : ");
        for(int i = words.Length -1; i>=0; i--)
        {
            Console.Write(words[i]+ " ");
        }
        //Console.WriteLine ("Hello Mono World");
    }
}
Reversed order of the given string : World Hello 

22.
Write a program in C# to find if a given string is palindrome or not?

Hide Answer
Image 07-02-23 at 7.31 PM_11zon-2.webp

23.
Write a C# program to find the substring from a given string?

Hide Answer
Image 07-02-23 at 7.31 PM_11zon-3.webp

24.
Write a program to remove duplicate characters from a string?

Hide Answer
Image 07-02-23 at 7.32 PM_11zon.webp

25.
Write a program to find the sum of digits of a positive integer?

Hide Answer
Image 07-02-23 at 7.32 PM_11zon-2.webp

26.
Write a program to check whether the entered number is not divisible by 3 and 7?

Hide Answer
Image 07-02-23 at 7.32 PM (1)_11zon.webp

27.
What will be the output of the following C# code?

Image 07-02-23 at 7.33 PM_11zon.webp

Hide Answer
Output:

79

28.
What will be the output of the following code?

Image 07-02-23 at 7.33 PM (1)_11zon.webp

Hide Answer
Output:

500

29.
What will be the output of the following code?

Image 07-02-23 at 7.33 PM (2)_11zon.webp

Hide Answer
Output:

11

Looking for re

let arr = [1,2,3,5],
Count = 10;
Output = [];

for(let i;i<=Count; i++){
  !arr.includes(i)?Output.push(i):"";
}
console.log(Output);

https://www.turing.com/interview-questions/c-sharp



